function ouvrirPopupLogin(requestToken) {
    logMessage('group', "ü™ü Ouverture de la popup de connexion..."); // D√©marre le groupe de logs
    return new Promise((resolve) => {
        if (!requestToken) {
            logMessage('error', "‚ùå Erreur : request_token manquant !");
            logMessage('group', null); // Ferme le groupe de logs
            return resolve(false);
        }

        const POPUP_WIDTH = 640;
        const POPUP_HEIGHT = 360;
        const left = (window.screen.width - POPUP_WIDTH) / 2;
        const top = (window.screen.height - POPUP_HEIGHT) / 2;
        logMessage('log', `ü™ü Ouverture de la popup √† (${left}, ${top}) avec dimensions ${POPUP_WIDTH}x${POPUP_HEIGHT}`);

        const popup = window.open(
            `https://www.themoviedb.org/auth/access?request_token=${encodeURIComponent(requestToken)}`,
            "popupLogin",
            `width=${POPUP_WIDTH},height=${POPUP_HEIGHT},top=${top},left=${left},resizable=no,scrollbars=no,menubar=no,toolbar=no,location=no,status=no`
        );

        if (!popup) {
            logMessage('error', "‚ùå Impossible d'ouvrir la popup (bloqu√©e par le navigateur ?)");
            logMessage('group', null);
            return resolve(false);
        }
        logMessage('success', "‚úÖ Popup ouverte avec succ√®s !");

        const messageListener = (event) => {
            if (event.origin !== window.location.origin) {
                logMessage('error', "‚ùå Origine non autoris√©e !");
                logMessage('group', null);
                return resolve(false);
            }

            if (event.data === "authenticated") {
                logMessage('success', "‚úÖ Utilisateur authentifi√© !");
                window.removeEventListener("message", messageListener);
                logMessage('group', null);
                return resolve(true);
            } else {
                logMessage('log', `üì© Message re√ßu de la popup : ${event.data}`);
            }
        };

        window.addEventListener("message", messageListener);
        logMessage('info', "üëÇ √âcouteur de message ajout√© pour la popup.");

        // Optionnel : fermer la popup apr√®s un certain temps si l'utilisateur ne s'authentifie pas
        setTimeout(() => {
            if (popup && !popup.closed) {
                logMessage('warn', "‚ö†Ô∏è La popup se ferme apr√®s 30 secondes d'inactivit√©.");
                popup.close();
            }
        }, 30000); // 30 secondes

        logMessage('group', null); // Ferme le groupe de logs
    });
}

// Appel de la fonction pour afficher la documentation
afficherDocumentation(
    "popup.js",
    [
        { emoji: "ü™ü", description: "Ouverture de la popup de connexion", couleur: "color: #1E90FF; font-weight: bold;" },
        { emoji: "‚ùå", description: "Erreur lors de l'ouverture", couleur: "color: #FF4500; font-weight: bold;" },
        { emoji: "‚úÖ", description: "Popup ouverte avec succ√®s", couleur: "color: #32CD32; font-weight: bold;" },
        { emoji: "üì©", description: "Message re√ßu de la popup", couleur: "color: lightblue; font-weight: bold;" },
        { emoji: "üëÇ", description: "√âcouteur de message ajout√©", couleur: "color: #FFD700; font-weight: bold;" }
    ],
    [
        {
            nom: "ouvrirPopupLogin(requestToken)",
            couleur: "color: #1E90FF; font-weight: bold;",
            descriptions: [
                "Ouvre une popup de connexion pour l'utilisateur.",
                "V√©rifie la pr√©sence du requestToken et g√®re les erreurs si absent.",
                "D√©finit la position et la taille de la popup.",
                "Ajoute un √©couteur de message pour recevoir des notifications d'authentification.",
                "R√©sout la promesse avec succ√®s si l'utilisateur est authentifi√©."
            ]
        }
    ]
);