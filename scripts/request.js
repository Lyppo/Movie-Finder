async function request(url, type, params = {}, content = {}) {
    logMessage('group', "üü¢ [REQ] Cr√©ation de la requ√™te..."); // D√©marre un groupe de log

    // V√©rifie si l'URL est correcte
    if (!url.includes("api.themoviedb.org")) {
        logMessage('error', "‚ùå L'URL doit concerner api.themoviedb.org.");
        logMessage('group', null);
        return null;
    }

    // V√©rification de la m√©thode HTTP
    const validMethods = ['GET', 'POST', 'PUT', 'DELETE'];
    if (!validMethods.includes(type)) {
        logMessage('error', `‚ùå M√©thode HTTP invalide : ${type}.`);
        logMessage('group', null);
        return null;
    }

    // Cr√©ation des param√®tres de recherche
    let searchParams = new URLSearchParams(params);
    url += searchParams.toString() ? `?${searchParams.toString()}` : "";

    // Ajout du token d'acc√®s au contenu si pr√©sent
    if (content.access_token) {
        content.access_token = ACCESS_TOKEN; // Remplace le token par la valeur actuelle
    }

    logMessage('group', `[REQUEST] ${type} ‚Üí ${url}`);
    logMessage('log', "üì© Contenu envoy√© :", { ...content, access_token: '***' }); // Masque le token dans les logs

    try {
        // Envoi de la requ√™te
        let response = await fetch(url, {
            method: type,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${ACCESS_TOKEN}`, // Utilisation de ACCESS_TOKEN
            },
            body: Object.keys(content).length > 0 ? JSON.stringify(content) : undefined
        });

        // Analyse de la r√©ponse
        const data = await response.json();
        logMessage('log', "üì¨ R√©ponse re√ßue :", data);

        // Gestion des erreurs de r√©ponse
        if (!response.ok) {
            throw new Error(`‚ö†Ô∏è Erreur API : ${response.status} - ${data.status_message || 'Erreur inconnue'}`);
        }

        logMessage('group', null); // Termine le groupe de log
        return data; // Retourne les donn√©es
    } catch (error) {
        logMessage('error', `‚ùå Erreur : ${error.message}`); // Affiche les erreurs
        logMessage('group', null); // Termine le groupe de log en cas d'erreur
        return null;
    }
}

// Appel de la fonction pour afficher la documentation
afficherDocumentation(
    "request.js",
    [
        { emoji: "üü¢", description: "Cr√©ation de la requ√™te", couleur: "color: #1E90FF; font-weight: bold;" },
        { emoji: "‚ùå", description: "Erreur d'URL ou de requ√™te", couleur: "color: #FF4500; font-weight: bold;" },
        { emoji: "üì©", description: "Contenu envoy√©", couleur: "color: lightblue; font-weight: bold;" },
        { emoji: "üì¨", description: "R√©ponse re√ßue", couleur: "color: #32CD32; font-weight: bold;" },
        { emoji: "‚ö†Ô∏è", description: "Erreur API", couleur: "color: orange; font-weight: bold;" }
    ],
    [
        {
            nom: "request(url, type, params = {}, content = {})",
            couleur: "color: #FFD700; font-weight: bold;",
            descriptions: [
                "Effectue une requ√™te HTTP vers l'API TMDB.",
                "V√©rifie que l'URL est correcte avant d'envoyer la requ√™te.",
                "G√®re l'ajout du token d'acc√®s dans le contenu si pr√©sent.",
                "Affiche les logs pour le contenu envoy√© et la r√©ponse re√ßue.",
                "Retourne les donn√©es de la r√©ponse ou null en cas d'erreur."
            ]
        }
    ]
);