import { load, getCookies, logoutClear, loged, createRequestToken, createAccessToken, createSession, request, logoutRequest } from './api.js';
import { ouvrirPopupLogin } from './popup.js';
import { creerElement, creerElementsDepuisHTML, removeElement } from './html.js';

// üü¢ CHARGEMENT INITIAL
document.addEventListener("DOMContentLoaded", async () => {
    console.log("üü¢ Chargement initial..."); // Message de d√©bogage
    load(); // Charge les cookies
    setupUI(); // Initialise l'interface utilisateur
    setupTest(); // Initialise les tests
    await verifyLoginStatus(); // V√©rifie l'√©tat de connexion
});

// üü† CONFIGURATION DE L'INTERFACE UTILISATEUR
function setupUI() {
    console.log("üü† Configuration de l'interface utilisateur..."); // Message de d√©bogage
    creerElementsDepuisHTML(`<img id="poster" src="Images/Default.png" alt="Default Image" />`, "#zenith");
    creerElementsDepuisHTML(`<div id="container-img"></div>`, "#app");
    creerElementsDepuisHTML(`<h2>Default Movie</h2>`, "#app");

    // Cr√©ation du conteneur de boutons
    let div = creerElementsDepuisHTML(`<div id="buttons"></div>`, "#app");
    div = document.getElementById("buttons");
    
    div.appendChild(creerElementsDepuisHTML(`<button id="like">‚ù§Ô∏è Ajouter aux favoris</button>`));
    div.appendChild(creerElementsDepuisHTML(`<button id="next">‚û°Ô∏è Suivant</button>`));
}

// üîµ AUTHENTIFICATION : CONNEXION
async function login(event) {
    event?.preventDefault(); // Emp√™che le rechargement de la page
    toggleButtonState("btnLogin", false); // D√©sactive le bouton temporairement
    console.log("üîµ Tentative de connexion..."); // Message de d√©bogage

    const tmpToken = await createRequestToken();
    let authenticated = false;
    let attempts = 0;

    while (!authenticated && attempts < 3) {
        authenticated = await ouvrirPopupLogin(tmpToken);
        if (!authenticated) {
            console.warn(`‚ùå Tentative d'authentification √©chou√©e (${attempts + 1}/3)`); // Message de d√©bogage
            attempts++;
        }
    }

    if (!authenticated) {
        console.error("üö® √âchec de l'authentification apr√®s 3 tentatives."); // Message d'erreur
        toggleButtonState("btnLogin", true);
        return;
    }

    await createAccessToken(tmpToken);
    await createSession();

    removeElement("#btnLogin");
    updateUIAfterLogin();
    console.log("üîµ Connexion r√©ussie !"); // Message de d√©bogage
}

// üî¥ AUTHENTIFICATION : D√âCONNEXION
async function logout(event) {
    event?.preventDefault();
    toggleButtonState("btnLogout", false);
    console.log("üî¥ Tentative de d√©connexion..."); // Message de d√©bogage

    try {
        // Suppression des cookies
        ["ACCOUNT_ID", "ACCESS_TOKEN", "SESSION_ID"].forEach(cookieName => {
            document.cookie = `${cookieName}=; max-age=0; path=/;`;
            console.log(`üóëÔ∏è Cookie supprim√©: ${cookieName}`); // Message de d√©bogage
        });

        // Suppression de la session TMDB
        const sessionDeletion = await request(
            "https://api.themoviedb.org/3/authentication/session", 
            "DELETE", 
            {}, 
            { session_id: '' }
        );

        if (!sessionDeletion.success) throw new Error("Erreur lors de la suppression de la session."); 

        // Suppression du token TMDB
        const tokenDeletion = await logoutRequest();
        if (!tokenDeletion.success) throw new Error("Erreur lors de la suppression du token.");

        logoutClear();
        removeElement("#btnLogout");
        updateUIAfterLogout();
        console.log("üî¥ D√©connexion r√©ussie !"); // Message de d√©bogage
    } catch (error) {
        console.error(`üö® ${error.message}`); // Message d'erreur
        toggleButtonState("btnLogout", true);
    }
}

// üîÑ MISE √Ä JOUR UI : APR√àS CONNEXION
function updateUIAfterLogin() {
    console.log("üîÑ Mise √† jour de l'UI apr√®s connexion..."); // Message de d√©bogage
    creerElementsDepuisHTML(`<button id="btnLogout">Se d√©connecter</button>`, "#zenith")
        .addEventListener("click", logout);
}

// üîÑ MISE √Ä JOUR UI : APR√àS D√âCONNEXION
function updateUIAfterLogout() {
    console.log("üîÑ Mise √† jour de l'UI apr√®s d√©connexion..."); // Message de d√©bogage
    creerElementsDepuisHTML(`<button id="btnLogin">Se connecter</button>`, "#zenith")
        .addEventListener("click", login);
}

// üîç V√âRIFICATION DE L'√âTAT DE CONNEXION
async function verifyLoginStatus() {
    console.log("üîç V√©rification de l'√©tat de connexion..."); // Message de d√©bogage
    if (await loged()) {
        updateUIAfterLogin();
    } else {
        updateUIAfterLogout();
    }
}

// üîÑ FONCTION UTILITAIRE : ACTIVER/D√âSACTIVER UN BOUTON
function toggleButtonState(buttonId, enabled) {
    const button = document.getElementById(buttonId);
    if (button) {
        button.disabled = !enabled;
        console.log(`üîò √âtat du bouton ${buttonId} : ${enabled ? 'activ√©' : 'd√©sactiv√©'}`); // Message de d√©bogage
    }
}

async function loadImage(element, imagePath) {
    const resolutions = [
        { size: 'w45', width: 45 },
        { size: 'w92', width: 92 },
        { size: 'w154', width: 154 },
        { size: 'w185', width: 185 },
        { size: 'w300', width: 300 },
        { size: 'w342', width: 342 },
        { size: 'w500', width: 500 },
        { size: 'w780', width: 780 },
        { size: 'w1280', width: 1280 },
        { size: 'original', width: Infinity }
    ];

    // Afficher la largeur de l'√©l√©ment
    console.log("üìè √âl√©ment largeur:", element.clientWidth);

    // Fonction pour calculer le flou
    function calculateBlur(elementWidth, loadedWidth) {
        const blur = Math.max(15 - (loadedWidth / 20), 0); // Ajuster selon besoin
        console.log(`üå´Ô∏è Calcul du flou: ${blur} (√âl√©ment Largeur: ${elementWidth}, Charg√© Largeur: ${loadedWidth})`);
        return blur;
    }

    // Variable pour suivre l'indice de l'image charg√©e
    let lastLoadedIndex = -1;

    // Fonction asynchrone pour charger l'image
    async function loadImageAtIndex(index) {
        if (index < 0 || index >= resolutions.length) return; // V√©rifier l'indice

        const res = resolutions[index]; // Obtenir la r√©solution actuelle
        // Si l'indice est inf√©rieur √† lastLoadedIndex, ne rien faire
        if (lastLoadedIndex >= index) return;

        console.log(`üîÑ Chargement de l'image √† l'indice ${index}: ${res.size}`);
        
        let img = new Image();
        img.src = `https://image.tmdb.org/t/p/${res.size}${imagePath}`;

        // Lorsque l'image est charg√©e
        img.onload = () => {
            console.log(`‚úÖ Image charg√©e: ${img.src}`);
            lastLoadedIndex = index; // Mettre √† jour l'indice
            element.src = img.src; // Changer le src de l'√©l√©ment
            element.style.filter = `blur(${calculateBlur(element.clientWidth, res.width)}px)`; // Appliquer le flou
        };

        // Retourner une promesse qui se r√©sout lorsque l'image est charg√©e
        return new Promise((resolve) => {
            img.onload = () => {
                lastLoadedIndex = index; // Mettre √† jour l'indice
                element.src = img.src; // Changer le src de l'√©l√©ment
                element.style.filter = `blur(${calculateBlur(element.clientWidth, res.width)}px)`; // Appliquer le flou
                resolve(index); // R√©soudre la promesse une fois l'image charg√©e
            };
        });
    }

    // Appeler la fonction pour charger toutes les r√©solutions, une par une
    for (let i = 0; i < resolutions.length; i++) {
        await loadImageAtIndex(i);
    }
}

// Exemple d'utilisation
async function getUser() {
    console.log("üîç Chargement des donn√©es utilisateur..."); // Message de d√©bogage
    let data = await request("https://api.themoviedb.org/3/account/{account_id}", "GET", { session_id: '' });
    let poster = document.getElementById("poster");
    console.log("üîç Chargement de l'image pour l'utilisateur...");
    loadImage(poster, data.avatar.tmdb.avatar_path);
}

function setupTest() {
    console.log("üîß Configuration des tests..."); // Message de d√©bogage
    creerElementsDepuisHTML(`<button style="top: 0px; left: 0px;" id="testuser">User</button>`, "#zenith")
        .addEventListener("click", getUser);
    console.log('üîß Bouton de test cr√©√©.'); // Message de d√©bogage
}