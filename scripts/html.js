// Fonction pour cr√©er un √©l√©ment HTML
function creerElement({ tag = "div", parent = "body", numero = 0, attributs = {} } = {}) {
    // Cr√©ation de l'√©l√©ment
    const element = document.createElement(tag);
    console.groupCollapsed(`üõ†Ô∏è Cr√©ation de l'√©l√©ment <${tag}>.`);

    // Attribution d'un ID par d√©faut si non fourni
    if (!("id" in attributs)) {
        attributs.id = "unamed-" + Math.floor(10000 + Math.random() * 90000);
        console.log(`üîç ID non fourni, attribu√© : ${attributs.id}`);
    }

    // Ajout du contenu texte si fourni
    if ("textContent" in attributs) {
        element.textContent = attributs.textContent;
        console.log(`‚úèÔ∏è Contenu texte ajout√© : ${attributs.textContent}`);
        delete attributs.textContent; // Suppression de l'attribut apr√®s usage
    }

    // Ajout des autres attributs
    Object.entries(attributs).forEach(([key, value]) => {
        element.setAttribute(key, value);
        console.log(`üîß Attribut ajout√© : ${key}="${value}"`);
    });

    // S√©lection du parent et ajout de l'√©l√©ment
    const parents = document.querySelectorAll(parent);
    if (parents.length === 0) {
        console.warn(`‚ö†Ô∏è Parent '${parent}' non trouv√©. Assign√© √† <body> par d√©faut.`);
        document.body.appendChild(element);
    } else if (parents.length > numero) {
        parents[numero].appendChild(element);
        console.log(`‚úÖ √âl√©ment ajout√© au parent '${parent}' num√©ro ${numero}.`);
    } else {
        console.warn(`‚ö†Ô∏è Parent '${parent}' num√©ro ${numero} non trouv√©. Assign√© √† l'√©l√©ment 0 par d√©faut.`);
        parents[0].appendChild(element);
    }

    console.groupEnd();

    return element; // Retourne l'√©l√©ment cr√©√©
}

// Fonction pour supprimer un √©l√©ment HTML
function removeElement(cible = "body", index = 0) {
    const elements = document.querySelectorAll(cible);
    console.groupCollapsed(`üßπ Tentative de suppression d'un √©l√©ment correspondant √† '${cible}' √† l'index ${index}.`);

    // V√©rifie si des √©l√©ments ont √©t√© trouv√©s
    if (elements.length === 0) {
        console.warn(`‚ö†Ô∏è Aucun √©l√©ment trouv√© pour '${cible}'.`);
        
        console.groupEnd();
        return false; // Retourne false si aucun √©l√©ment n'est trouv√©
    }

    if (index === -1) {
        // Supprime tous les √©l√©ments correspondants
        elements.forEach(el => {
            el.remove();
            console.log(`üóëÔ∏è √âl√©ment supprim√©.`);
        });
        
        console.groupEnd();
        return true; // Retourne true si la suppression a r√©ussi
    } else if (index >= 0 && elements.length > index) {
        elements[index].remove();
        console.log(`üóëÔ∏è √âl√©ment √† l'index ${index} supprim√©.`);
        
        console.groupEnd();
        return true; // Retourne true si la suppression a r√©ussi
    } else {
        console.warn(`‚ö†Ô∏è Aucun √©l√©ment trouv√© pour '${cible}' √† l'index ${index}.`);
        
        console.groupEnd();
        return false; // Retourne false si l'index est invalide
    }
}

// Fonction pour cr√©er des √©l√©ments √† partir d'une cha√Æne HTML
function creerElementsDepuisHTML(htmlString = "", parent = "body", numero = 0) {
    // Nettoyage de la cha√Æne HTML
    htmlString = htmlString.trim();
    console.groupCollapsed(`üìú Traitement de la cha√Æne HTML : ${htmlString}`);

    // V√©rifie si la cha√Æne commence par une balise
    const regex = /^<(\w+)([^>]*)\/?>$|^<(\w+)([^>]*)>(.*?)<\/\3>$/s;
    const match = htmlString.match(regex);

    if (!match) {
        console.error("üö® Erreur : La cha√Æne HTML est mal form√©e.");
        
        console.groupEnd();
        return null; // Retourne null en cas d'erreur
    }

    // D√©terminer le tag, les attributs et le contenu texte
    let tag, attributesString, textContent;
    if (match[1]) {
        // Cas d'une balise auto-fermante
        tag = match[1];
        attributesString = match[2];
        textContent = ""; // Pas de contenu texte pour les balises auto-fermantes
    } else {
        // Cas d'une balise normale
        tag = match[3];
        attributesString = match[4];
        textContent = match[5]?.trim() || ""; // Contenu texte entre les balises
    }

    // Parse des attributs
    const attributs = {};
    const attrRegex = /(\w+)\s*=\s*"([^"]*?)"/g;
    let attrMatch;

    while ((attrMatch = attrRegex.exec(attributesString)) !== null) {
        attributs[attrMatch[1]] = attrMatch[2]; // Ajoute l'attribut au dictionnaire
        console.log(`üîç Attribut d√©tect√© : ${attrMatch[1]}="${attrMatch[2]}"`);
    }

    // Ajoute le texte de contenu √† l'objet d'attributs si ce n'est pas une balise auto-fermante
    if (textContent) {
        attributs.textContent = textContent;
    }

    // Utilise la fonction creerElement pour cr√©er l'√©l√©ment
    try {
        const nouvelElement = creerElement({ tag, parent, numero, attributs });
        console.log(`‚úÖ √âl√©ment <${tag}> cr√©√© avec succ√®s.`);
        
        console.groupEnd();
        return nouvelElement;
    } catch (error) {
        console.error("üö® Erreur lors de la cr√©ation de l'√©l√©ment :", error);
        
        console.groupEnd();
        return null; // Retourne null en cas d'erreur
    }
}