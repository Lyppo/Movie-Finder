function load() {
    ACCESS_TOKEN = cookies["ACCESS_TOKEN"];
    ACCOUNT_ID = cookies["ACCOUNT_ID"];
    SESSION_ID = cookies["SESSION_ID"];
}

async function loged() {
    if (!ACCESS_TOKEN) {
        return false;
    } else {
        logMessage('group', '[LOGGED]'); 
        logMessage('log', "‚úÖ V√©rification de l'authentification...");

        try {
            const data = await request("https://api.themoviedb.org/3/authentication");
            logMessage('log', "‚úÖ R√©sultat :", data);
            console.groupEnd(); 
            return data.success;
        } catch (error) {
            logMessage('error', "Erreur lors de la v√©rification de l'authentification :", error);
            console.groupEnd();
            return false;
        }
    }
}

async function login(event) {
    event?.preventDefault();

    if (event?.target) {
        event.target.removeEventListener("click", login);
    }

    logMessage('group', "üîµ Tentative de connexion...");

    const tmpToken = await createRequestToken();
    let authenticated = false;
    let attempts = 0;

    while (!authenticated && attempts < 3) {
        authenticated = await ouvrirPopupLogin(tmpToken);
        if (!authenticated) {
            logMessage('warn', `‚ùå Tentative d'authentification √©chou√©e (${attempts + 1}/3)`);
            attempts++;
        }
    }

    if (!authenticated) {
        logMessage('error', "üö® √âchec de l'authentification apr√®s 3 tentatives.");
        console.groupEnd();
        event.target.addEventListener("click", login);
        return;
    }

    try {
        await createAccessToken(tmpToken);
        await createSession();

        let userInterface = document.querySelectorAll("#userInterface > *");

        // Suppression des √©l√©ments de l'interface utilisateur
        userInterface.forEach(el => el.remove());

        setuploged();
        logMessage('log', "üîµ Connexion r√©ussie !");
    } catch (error) {
        logMessage('error', "Erreur lors de la cr√©ation du token ou de la session :", error);
    }

    console.groupEnd();
}

// Appel de la fonction pour afficher la documentation
afficherDocumentation(
    "login.js",
    [
        { emoji: "‚úÖ", description: "V√©rification de l'authentification", couleur: "color: #32CD32; font-weight: bold;" },
        { emoji: "‚ùå", description: "Tentative d'authentification √©chou√©e", couleur: "color: #FF4500; font-weight: bold;" },
        { emoji: "üö®", description: "√âchec de l'authentification", couleur: "color: #FF4500; font-weight: bold;" },
        { emoji: "üîµ", description: "Tentative de connexion", couleur: "color: #1E90FF; font-weight: bold;" }
    ],
    [
        {
            nom: "load()",
            couleur: "color: #FFD700; font-weight: bold;",
            descriptions: [
                "Charge les cookies ACCESS_TOKEN, ACCOUNT_ID et SESSION_ID."
            ]
        },
        {
            nom: "loged()",
            couleur: "color: #1E90FF; font-weight: bold;",
            descriptions: [
                "V√©rifie si l'utilisateur est authentifi√©.",
                "Affiche les logs de la v√©rification d'authentification.",
                "Renvoie vrai si l'utilisateur est authentifi√©, faux sinon."
            ]
        },
        {
            nom: "login(event)",
            couleur: "color: #1E90FF; font-weight: bold;",
            descriptions: [
                "G√®re le processus de connexion de l'utilisateur.",
                "Emp√™che le rechargement de la page lors de la connexion.",
                "Effectue plusieurs tentatives d'authentification (maximum 3).",
                "Affiche les messages de d√©bogage et d'erreur selon le r√©sultat."
            ]
        }
    ]
);